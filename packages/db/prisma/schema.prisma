generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/client"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "../lib/generated/zod"
  useTypeAssertions         = true
  createRelationValuesTypes = true
  useMultipleFiles          = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl =  env("DIRECT_URL")
  extensions = [vector]
}

model UniqueKeywordClusterResult {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keywordId String  @unique
  keyword UniqueKeyword @relation("ClusterResultToUniqueKeyword", fields: [keywordId], references: [id])
  cluster   Int
  category  KeywordCategory
  
  @@index([category, cluster])
  @@index([cluster])
  @@index([category])
  @@index([keywordId])
}

model UniqueKeyword {
  id               String            @id @default(cuid())
  semanticName     String
  category         KeywordCategory
  vector           Unsupported("vector(256)")? // Embedding vector for the keyword
  keywordInstances KeywordInstance[] @relation("UniqueKeywordToKeywordInstances") // One-to-many relation to KeywordInstance
  measures         Measure[]         @relation // One-to-many relation to Measure
  relatedFromKeywords  RelatedKeywords[]  @relation("FromRelatedKeywords")
  relatedToKeywords RelatedKeywords[]  @relation("ToRelatedKeywords")
  clusterResult UniqueKeywordClusterResult? @relation("ClusterResultToUniqueKeyword")
  @@unique([semanticName, category]) //Semantic anme and category should be unique and indexable
  @@index([semanticName, category])
  @@index([category])
}

model RelatedKeywords {
  id                      String                 @id @default(cuid())
  fromKeyword             UniqueKeyword          @relation("FromRelatedKeywords", fields: [fromKeywordId], references: [id])
  fromKeywordId           String
  toKeyword               UniqueKeyword          @relation("ToRelatedKeywords", fields: [toKeywordId], references: [id])
  toKeywordId             String
  relationType            KeywordRelation

  keywordGroupOccurrences RelatedKeywordGroupOccurrences[] @relation("GroupOccurrencesToRelatedKeywords") 
  parsedCaseOccurrences   RelatedKeywordCaseOccurrences[]  @relation("CaseOccurrencesToRelatedKeywords")

  @@unique([fromKeywordId, toKeywordId, relationType])  // Ensure that each relation is unique
  @@index([fromKeywordId, toKeywordId, relationType])
  @@index([fromKeywordId, toKeywordId])
  @@index([fromKeywordId])
  @@index([toKeywordId])
  @@index([fromKeywordId, relationType])
  @@index([toKeywordId, relationType])
  @@index([relationType])
}

model RelatedKeywordGroupOccurrences {
  id                   String                @id @default(cuid())

  relatedKeywordsId     String
  relatedKeywords       RelatedKeywords       @relation("GroupOccurrencesToRelatedKeywords", fields: [relatedKeywordsId], references: [id])

  keywordInstanceGroupId String
  keywordInstanceGroup KeywordInstanceGroup  @relation("GroupOccurrencesToInstanceGroup", fields: [keywordInstanceGroupId], references: [id])
  
  @@index([relatedKeywordsId, keywordInstanceGroupId])
  @@unique([relatedKeywordsId, keywordInstanceGroupId])
  @@index([relatedKeywordsId])
  @@index([keywordInstanceGroupId])
}

model RelatedKeywordCaseOccurrences {
  id                String               @id @default(cuid())

  relatedKeywordsId  String
  relatedKeywords    RelatedKeywords      @relation("CaseOccurrencesToRelatedKeywords", fields: [relatedKeywordsId], references: [id])

  parsedPatientCaseId String
  parsedPatientCase ParsedPatientCase    @relation("CaseOccurrencesToParsedPatientCase", fields: [parsedPatientCaseId], references: [id])

  @@index([relatedKeywordsId, parsedPatientCaseId])
  @@unique([relatedKeywordsId, parsedPatientCaseId])
  @@index([relatedKeywordsId])
  @@index([parsedPatientCaseId])
}

model KeywordInstance {
  id              String               @id @default(cuid())
  relatedCaseId   String // Reference to the originating patient case
  uniqueKeywordId String
  measureId       String?
  contextSentence String
  keywordGroupId  String // Foreign key to KeywordInstanceGroup (optional)
  keywordGroup    KeywordInstanceGroup @relation("GroupToKeywordInstances", fields: [keywordGroupId], references: [id]) // many-to-one relation to KeywordInstanceGroup
  vector          Unsupported("vector(256)")? // Embedding vector for the word plus context notes
  note            String?

  // Relation to UniqueKeyword
  uniqueKeyword UniqueKeyword @relation("UniqueKeywordToKeywordInstances", fields: [uniqueKeywordId], references: [id])

  // Relation to Measure
  measure Measure? @relation(fields: [measureId], references: [id])
  
  @@index([uniqueKeywordId])
  @@index([measureId])
  @@index([keywordGroupId])
  @@index([relatedCaseId])
}

model Measure {
  id               String            @id @default(cuid())
  value            String
  unitId           String? // Foreign key to UniqueKeyword (optional)
  keywordInstances KeywordInstance[] @relation // One-to-many relation to KeywordInstance

  // Relation to UniqueKeyword
  unit UniqueKeyword? @relation(fields: [unitId], references: [id])
}

model KeywordInstanceGroup {
  id               String            @id @default(cuid())
  vector           Unsupported("vector(256)")? // Embedding vector for the summaristic embedding of the group
  keywordInstances KeywordInstance[] @relation("GroupToKeywordInstances") // Many-to-many relation to KeywordInstance
  parentCaseAsProcedure String? // Reference to the originating patient case as a procedure
  patientContext ParsedPatientCase? @relation("PatientContextToKeywordGroup") // One-to-one relation to ParsedPatientCase
  caseProcedures  ParsedPatientCase? @relation("ProcedureToKeywordGroup", fields: [parentCaseAsProcedure], references: [id]) // One-to-one relation to ParsedPatientCase
  caseResult     ParsedPatientCase? @relation("CaseResultToKeywordGroup")

  relatedKeywordGroupOccurences RelatedKeywordGroupOccurrences[]  @relation("GroupOccurrencesToInstanceGroup")
}

model ParsedPatientCase {
  id                String  @id @default(cuid())
  patientCaseDataId String  @unique // Foreign key to PatientCaseData, must be unique for a one-to-one relation
  patientContextId  String? @unique // Foreign key to KeywordInstanceGroup (optional)
  procedureIds      String[] @unique // Foreign key to KeywordInstanceGroup (optional)
  caseResultId      String? @unique // Foreign key to KeywordInstanceGroup (optional)
  vector            Unsupported("vector(256)")? // Embedding vector for the entire case

  // Relations to KeywordInstanceGroup
  patientContext KeywordInstanceGroup? @relation("PatientContextToKeywordGroup", fields: [patientContextId], references: [id])
  caseProcedures     KeywordInstanceGroup[] @relation("ProcedureToKeywordGroup")
  caseResult     KeywordInstanceGroup? @relation("CaseResultToKeywordGroup", fields: [caseResultId], references: [id])

  // Relation to PatientCaseData
  patientCaseData PatientCaseData @relation(fields: [patientCaseDataId], references: [id])

  // Keyword relations generated by this case
   relatedKeywordCaseOccurrences RelatedKeywordCaseOccurrences[] @relation("CaseOccurrencesToParsedPatientCase")
}

model PatientCaseData {
  id                String             @id @default(cuid())
  parsedPatientCase ParsedPatientCase? @relation
  patientUid       String
  patientNote   String?
  patientAge    Int?
  patientGender Gender?

  parsedAt DateTime?
  updatedAt DateTime?
}

enum Gender {
  M
  F
}

enum KeywordCategory {
  demographic
  personalHistory
  medicalHistory
  symptom
  binaryMeasure
  quantitativeMeasure
  adjectiveMeasure
  suspectedDiagnosis
  certainDiagnosis
  treatment
  test
  complication
  outcome
}

enum KeywordRelation {
  cooccurrence
  describes
}