generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/client"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "../lib/generated/zod"
  useTypeAssertions         = true
  createRelationValuesTypes = true
  useMultipleFiles          = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UniqueKeyword {
  id               String            @id @default(cuid())
  semantic_name    String
  category         KeywordCategory
  vector           Float[] // Embedding vector for the keyword
  keywordInstances KeywordInstance[] @relation("UniqueKeywordToKeywordInstances") // One-to-many relation to KeywordInstance
  measures         Measure[]         @relation // One-to-many relation to Measure
}

model KeywordInstance {
  id              String               @id @default(cuid())
  relatedCaseId   String // Reference to the originating patient case
  uniqueKeywordId String
  measureId       String?
  contextSentence String
  keywordGroupId  String // Foreign key to KeywordInstanceGroup (optional)
  keywordGroup    KeywordInstanceGroup @relation("GroupToKeywordInstances", fields: [keywordGroupId], references: [id]) // many-to-one relation to KeywordInstanceGroup
  vector          Float[] // Embedding vector for the word plus context notes
  note            String?

  // Relation to UniqueKeyword
  uniqueKeyword UniqueKeyword @relation("UniqueKeywordToKeywordInstances", fields: [uniqueKeywordId], references: [id])

  // Relation to Measure
  measure Measure? @relation(fields: [measureId], references: [id])
}

model Measure {
  id               String            @id @default(cuid())
  value            String
  unitId           String? // Foreign key to UniqueKeyword (optional)
  keywordInstances KeywordInstance[] @relation // One-to-many relation to KeywordInstance

  // Relation to UniqueKeyword
  unit UniqueKeyword? @relation(fields: [unitId], references: [id])
}

model KeywordInstanceGroup {
  id               String            @id @default(cuid())
  vector           Float[] // Embedding vector for the summaristic embedding of the group
  keywordInstances KeywordInstance[] @relation("GroupToKeywordInstances") // Many-to-many relation to KeywordInstance

  patientContext ParsedPatientCase? @relation("PatientContextToKeywordGroup") // One-to-one relation to ParsedPatientCase
  caseProcedure  ParsedPatientCase? @relation("ProcedureToKeywordGroup") // One-to-one relation to ParsedPatientCase
  caseResult     ParsedPatientCase? @relation("CaseResultToKeywordGroup")
}

model ParsedPatientCase {
  id                String  @id @default(cuid())
  patientCaseDataId String  @unique // Foreign key to PatientCaseData, must be unique for a one-to-one relation
  patientContextId  String? @unique // Foreign key to KeywordInstanceGroup (optional)
  proceduresId      String? @unique // Foreign key to KeywordInstanceGroup (optional)
  caseResultId      String? @unique // Foreign key to KeywordInstanceGroup (optional)
  vector            Float[] // Embedding vector for the entire case

  // Relations to KeywordInstanceGroup
  patientContext KeywordInstanceGroup? @relation("PatientContextToKeywordGroup", fields: [patientContextId], references: [id])
  procedures     KeywordInstanceGroup? @relation("ProcedureToKeywordGroup", fields: [proceduresId], references: [id])
  caseResult     KeywordInstanceGroup? @relation("CaseResultToKeywordGroup", fields: [caseResultId], references: [id])

  // Relation to PatientCaseData
  patientCaseData PatientCaseData @relation(fields: [patientCaseDataId], references: [id])
}

model PatientCaseData {
  id                String             @id @default(cuid())
  parsedPatientCase ParsedPatientCase? @relation
  patientUid       String
  patientNote   String?
  patientAge    Int?
  patientGender Gender?

  parsedAt DateTime?
  updatedAt DateTime?
}

enum Gender {
  M
  F
}

enum KeywordCategory {
  demographic
  personalHistory
  medicalHistory
  symptom
  binaryMeasure
  quantitativeMeasure
  adjectiveMeasure
  suspectedDiagnosis
  certainDiagnosis
  treatment
  test
  complication
  outcome
}
