import { TRPCError } from "@trpc/server"
import _ from "lodash"

import { publicProcedure } from "../../trpc"
import { SetCompanionDisplayMetaSchema } from "../schemas/companionMeta"
import { checkAndForkExistingCompanion } from "../utils/checkAndForkExistingCompanion"

export const setCompanionDisplayMetaProcedure = publicProcedure
	.input(SetCompanionDisplayMetaSchema)
	.mutation(async ({ input, ctx }) => {
		if (!input) {
			throw new TRPCError({
				code: "BAD_REQUEST",
				message: "Invalid companion meta provided",
			})
		}

		const { shortId, existingCompanion } =
			await checkAndForkExistingCompanion({
				remoteId: input.remoteId,
				ctx,
			})

		const pickedColumns = _.pickBy(
			{
				owner: ctx.userId,
				name: input.name,
			},
			(value) => value !== undefined,
		)

		const savedCompanion = await ctx.db.savedCompanion.upsert({
			where: { shortId },
			update: pickedColumns,
			create: {
				//TODO FIND A BETTER WAY TO CAST THIS
				...(existingCompanion as unknown as any),
				...pickedColumns,
				id: undefined, //resets the main id to be generated by the database
				shortId,
			},
		})

		return {
			remoteId: savedCompanion.shortId,
		}
	})
